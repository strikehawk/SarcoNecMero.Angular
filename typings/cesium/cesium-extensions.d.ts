/// <reference path="cesium-raw.d.ts" />

declare module Cesium {
    interface IOpenStreetMapImageryProviderOptions {
        /**
         * The OpenStreetMap server url.
         */
        url?: string;

        /**
         * The file extension for images on the server.
         */
        fileExtension?: string;

        /**
         * A proxy to use for requests. This object is expected to have a getURL function which returns the proxied URL.
         */
        proxy?: Proxy;

        /**
         * The rectangle of the layer.
         */
        rectangle?: Rectangle;

        /**
         * The minimum level-of-detail supported by the imagery provider.
         */
        minimumLevel?: number;

        /**
         * The maximum level-of-detail supported by the imagery provider, or undefined if there is no limit.
         */
        maximumLevel?: number;

        /**
         * The ellipsoid.  If not specified, the WGS84 ellipsoid is used.
         */
        ellipsoid?: Ellipsoid;

        /**
         * A credit for the data source, which is displayed on the canvas.
         */
        credit?: Credit|string;
    }

    /**
     * Creates a {@link UrlTemplateImageryProvider} instance that provides tiled imagery hosted by OpenStreetMap
     * or another provider of Slippy tiles.  The default url connects to OpenStreetMap's volunteer-run
     * servers, so you must conform to their
     * {@link http://wiki.openstreetmap.org/wiki/Tile_usage_policy|Tile Usage Policy}.
     *
     * @exports createOpenStreetMapImageryProvider
     *
     * @param {IOpenStreetMapImageryProviderOptions} [options] Object with the following properties.
     * @returns {UrlTemplateImageryProvider} The imagery provider.
     *
     * @exception {DeveloperError} The rectangle and minimumLevel indicate that there are more than four tiles at the minimum level. Imagery providers with more than four tiles at the minimum level are not supported.
     *
     * @see ArcGisMapServerImageryProvider
     * @see BingMapsImageryProvider
     * @see GoogleEarthImageryProvider
     * @see SingleTileImageryProvider
     * @see createTileMapServiceImageryProvider
     * @see WebMapServiceImageryProvider
     * @see WebMapTileServiceImageryProvider
     * @see UrlTemplateImageryProvider
     *
     *
     * @example
     * var osm = Cesium.createOpenStreetMapImageryProvider({
     *     url : 'https://a.tile.openstreetmap.org/'
     * });
     *
     * @see {@link http://wiki.openstreetmap.org/wiki/Main_Page|OpenStreetMap Wiki}
     * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}
     */
    function createOpenStreetMapImageryProvider(options?: IOpenStreetMapImageryProviderOptions): UrlTemplateImageryProvider;

    //TODO Create common base interface with IOpenStreetMapImageryProviderOptions
    interface ITileMapServiceImageryProviderOptions {
        /**
         * The OpenStreetMap server url.
         */
        url?: string;

        /**
         * The file extension for images on the server.
         */
        fileExtension?: string;

        /**
         * A proxy to use for requests. This object is expected to have a getURL function which returns the proxied URL.
         */
        proxy?: Proxy;

        /**
         * The rectangle of the layer.
         */
        rectangle?: Rectangle;

        /**
         * The minimum level-of-detail supported by the imagery provider.
         */
        minimumLevel?: number;

        /**
         * The maximum level-of-detail supported by the imagery provider, or undefined if there is no limit.
         */
        maximumLevel?: number;

        /**
         * The ellipsoid.  If not specified, the WGS84 ellipsoid is used.
         */
        ellipsoid?: Ellipsoid;

        /**
         * A credit for the data source, which is displayed on the canvas.
         */
        credit?: Credit|string;

        /**
         * The tiling scheme specifying how the ellipsoidal
         * surface is broken into tiles.  If this parameter is not provided, a {@link WebMercatorTilingScheme}
         * is used.
         */
        tilingScheme: TilingScheme;

        /**
         * Pixel width of image tiles.
         */
        tileWidth?: number;

        /**
         * Pixel height of image tiles.
         */
        tileHeight?: number;

        /**
         * Older versions of gdal2tiles.py flipped X and Y values in tilemapresource.xml.
         * Specifying this option will do the same, allowing for loading of these incorrect tilesets.
         */
        flipXY?: boolean;
    }

    /**
     * Creates a {@link UrlTemplateImageryProvider} instance that provides tiled imagery as generated by
     * {@link http://www.maptiler.org/'>MapTiler</a> / <a href='http://www.klokan.cz/projects/gdal2tiles/|GDDAL2Tiles} etc.
     *
     * @exports createTileMapServiceImageryProvider
     *
     * @param {ITileMapServiceImageryProviderOptions} [options] Object with the following properties.
     * @returns {UrlTemplateImageryProvider} The imagery provider.
     *
     * @see ArcGisMapServerImageryProvider
     * @see BingMapsImageryProvider
     * @see GoogleEarthImageryProvider
     * @see createOpenStreetMapImageryProvider
     * @see SingleTileImageryProvider
     * @see WebMapServiceImageryProvider
     * @see WebMapTileServiceImageryProvider
     * @see UrlTemplateImageryProvider
     *
     * @see {@link http://www.maptiler.org/|MapTiler}
     * @see {@link http://www.klokan.cz/projects/gdal2tiles/|GDDAL2Tiles}
     * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}
     *
     * @example
     * var tms = Cesium.createTileMapServiceImageryProvider({
     *    url : '../images/cesium_maptiler/Cesium_Logo_Color',
     *    fileExtension: 'png',
     *    maximumLevel: 4,
     *    rectangle: new Cesium.Rectangle(
     *        Cesium.Math.toRadians(-120.0),
     *        Cesium.Math.toRadians(20.0),
     *        Cesium.Math.toRadians(-60.0),
     *        Cesium.Math.toRadians(40.0))
     * });
     */
    function createTileMapServiceImageryProvider(options?: ITileMapServiceImageryProviderOptions): UrlTemplateImageryProvider;
}